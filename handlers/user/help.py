import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from keyboards import get_help_keyboard, get_main_menu

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("help"))
@router.message(F.text == "üÜò Help")
async def help_command(message: Message):
    """Handle /help command"""
    help_text = """
üÜò **Emoji Pack Bot Help**

**How to Use:**
1. Choose grid size (how many emojis to create)
2. Select adaptation method (how to fit your image)
3. Send image or video
4. Get your emoji pack!

**Grid Sizes:**
‚Ä¢ `1√ó3` - Timeline/progress bars
‚Ä¢ `3√ó1` - Tall subjects/portraits  
‚Ä¢ `2√ó2` - Basic 4-emoji pack
‚Ä¢ `3√ó3` - Classic 9-emoji pack
‚Ä¢ `2√ó5` - Wide scenes/landscapes
‚Ä¢ Custom - Any size up to 8√ó8

**Adaptation Methods:**
‚Ä¢ `Pad` - Adds borders, keeps everything ‚úÖ
‚Ä¢ `Stretch` - Changes proportions 
‚Ä¢ `Crop` - Cuts edges, focuses center

**Commands:**
/start - Start the bot
/help - Show this help
/setgrid X Y - Set grid size directly
/adapt method - Set adaptation method
/settings - Open settings menu
/cancel - Cancel current operation

Need more specific help? Use the buttons below! üëá
"""
    
    await message.answer(
        help_text,
        reply_markup=get_help_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "help_quickstart")
async def help_quickstart(callback: CallbackQuery):
    """Quick start guide"""
    text = """
üöÄ **Quick Start Guide**

**Step 1: Choose Grid Size**
‚Ä¢ For beginners: Try 2√ó2 or 3√ó3
‚Ä¢ For timelines: Use 1√ó3 
‚Ä¢ For portraits: Use 3√ó1

**Step 2: Pick Adaptation**
‚Ä¢ New users: Use "Pad" (recommended)
‚Ä¢ Advanced: Try "Stretch" or "Crop"

**Step 3: Send Media**
‚Ä¢ Images: JPG, PNG, WebP (up to 50MB)
‚Ä¢ Videos: MP4, AVI, MOV (up to 5 minutes)

**Step 4: Get Results**
‚Ä¢ Download ZIP file
‚Ä¢ Or send directly to Telegram

**Pro Tip:** Start with a square image (1:1 ratio) for best results!
"""
    
    await callback.message.edit_text(text, reply_markup=get_help_keyboard(), parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "help_grid")
async def help_grid(callback: CallbackQuery):
    """Grid size guide"""
    text = """
üìê **Grid Size Guide**

**Common Sizes:**
‚Ä¢ `1√ó3` - Perfect for progress bars, timelines
‚Ä¢ `3√ó1` - Great for tall objects, portraits
‚Ä¢ `2√ó2` - Simple 4-piece puzzles
‚Ä¢ `3√ó3` - Classic grid, most versatile
‚Ä¢ `4√ó4` - Detailed images, 16 emojis

**Custom Sizes:**
‚Ä¢ Any combination from 1√ó1 to 8√ó8
‚Ä¢ Examples: 1√ó5, 2√ó7, 6√ó2, etc.

**Choosing the Right Size:**
‚Ä¢ More cells = more detail
‚Ä¢ Fewer cells = simpler, clearer emojis
‚Ä¢ Match your image's aspect ratio

**Tips:**
‚Ä¢ Wide images ‚Üí Use 1√óX or 2√óX grids
‚Ä¢ Tall images ‚Üí Use X√ó1 or X√ó2 grids  
‚Ä¢ Square images ‚Üí Use X√óX grids
‚Ä¢ Complex images ‚Üí Use larger grids (4√ó4+)
"""
    
    await callback.message.edit_text(text, reply_markup=get_help_keyboard(), parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "help_adaptation")
async def help_adaptation(callback: CallbackQuery):
    """Adaptation method guide"""
    text = """
üîÑ **Adaptation Method Guide**

**Pad (Recommended) üìè**
‚Ä¢ Adds white borders to fit grid ratio
‚Ä¢ Keeps all original content
‚Ä¢ Best for: Most images, beginners
‚Ä¢ Result: No distortion, complete image

**Stretch ‚ÜîÔ∏è**
‚Ä¢ Changes image proportions 
‚Ä¢ Fits exactly to grid ratio
‚Ä¢ Best for: Abstract images, patterns
‚Ä¢ Result: May look distorted

**Crop ‚úÇÔ∏è**  
‚Ä¢ Cuts edges to fit grid ratio
‚Ä¢ Focuses on center content
‚Ä¢ Best for: Images with important centers
‚Ä¢ Result: May lose edge content

**When to Use What:**
‚Ä¢ Portrait photo ‚Üí Pad or Crop
‚Ä¢ Landscape photo ‚Üí Pad
‚Ä¢ Logo/text ‚Üí Pad
‚Ä¢ Pattern/texture ‚Üí Stretch
‚Ä¢ Face/person ‚Üí Crop (focuses on face)
"""
    
    await callback.message.edit_text(text, reply_markup=get_help_keyboard(), parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "help_tips")
async def help_tips(callback: CallbackQuery):
    """Tips and tricks"""
    text = """
üí° **Tips & Tricks**

**Image Quality:**
‚Ä¢ Use high-resolution images (1000√ó1000+)
‚Ä¢ Avoid very blurry or dark images
‚Ä¢ PNG files preserve quality better

**Grid Selection:**
‚Ä¢ Start small (2√ó2) for testing
‚Ä¢ Match image orientation (wide=1√óX, tall=X√ó1)
‚Ä¢ More cells = longer processing time

**Adaptation Tips:**
‚Ä¢ Use Pad for text/logos (keeps readability)
‚Ä¢ Use Crop for faces (centers on subject)
‚Ä¢ Preview before processing!

**Video Processing:**
‚Ä¢ Keep videos under 2 minutes for best results
‚Ä¢ Good lighting improves frame quality
‚Ä¢ Bot automatically picks best frames

**Performance:**
‚Ä¢ Process during off-peak hours
‚Ä¢ Use "Fast Mode" for quick tests
‚Ä¢ Clean cache regularly for better speed

**Telegram Stickers:**
‚Ä¢ Each emoji is 512√ó512 pixels
‚Ä¢ PNG format with transparency
‚Ä¢ Perfect for Telegram sticker packs!
"""
    
    await callback.message.edit_text(text, reply_markup=get_help_keyboard(), parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "help_faq")
async def help_faq(callback: CallbackQuery):
    """Frequently asked questions"""
    text = """
‚ùì **Frequently Asked Questions**

**Q: What file formats are supported?**
A: Images: JPG, PNG, WebP, BMP, TIFF
   Videos: MP4, AVI, MOV, WebM, MKV

**Q: What's the maximum file size?**
A: 50MB for images, same for videos up to 5 minutes

**Q: How long does processing take?**  
A: Usually 10-60 seconds depending on size and grid

**Q: Can I use the emojis commercially?**
A: Yes, but ensure you have rights to original image

**Q: Why is my image blurry?**
A: Try higher resolution input or smaller grid size

**Q: Bot not responding?**
A: Try /cancel then /start to reset

**Q: Can I process multiple images?**
A: Process one at a time for best results

**Q: How to create animated emojis?**
A: Send a video - bot extracts frames automatically

**Q: Where are my files stored?**
A: Temporarily cached, auto-deleted after 1 hour

**Still need help?** Contact support!
"""
    
    await callback.message.edit_text(text, reply_markup=get_help_keyboard(), parse_mode="Markdown")
    await callback.answer()